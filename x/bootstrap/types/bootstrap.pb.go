// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/bootstrap/v1beta1/bootstrap.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderDirection enumerates order directions.
type OrderDirection int32

const (
	// ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
	OrderDirectionUnspecified OrderDirection = 0
	// ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
	OrderDirectionBuy OrderDirection = 1
	// ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
	OrderDirectionSell OrderDirection = 2
)

var OrderDirection_name = map[int32]string{
	0: "ORDER_DIRECTION_UNSPECIFIED",
	1: "ORDER_DIRECTION_BUY",
	2: "ORDER_DIRECTION_SELL",
}

var OrderDirection_value = map[string]int32{
	"ORDER_DIRECTION_UNSPECIFIED": 0,
	"ORDER_DIRECTION_BUY":         1,
	"ORDER_DIRECTION_SELL":        2,
}

func (x OrderDirection) String() string {
	return proto.EnumName(OrderDirection_name, int32(x))
}

func (OrderDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92f7567bce1244ac, []int{0}
}

// OrderStatus enumerates order statuses.
type OrderStatus int32

const (
	// ORDER_STATUS_UNSPECIFIED specifies unknown order status
	OrderStatusUnspecified OrderStatus = 0
	// ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
	OrderStatusNotExecuted OrderStatus = 1
	// ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
	OrderStatusNotMatched OrderStatus = 2
	// ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
	OrderStatusPartiallyMatched OrderStatus = 3
	// ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
	OrderStatusCompleted OrderStatus = 4
	// ORDER_STATUS_EXPIRED indicates the order has been expired
	OrderStatusExpired OrderStatus = 5
)

var OrderStatus_name = map[int32]string{
	0: "ORDER_STATUS_UNSPECIFIED",
	1: "ORDER_STATUS_NOT_EXECUTED",
	2: "ORDER_STATUS_NOT_MATCHED",
	3: "ORDER_STATUS_PARTIALLY_MATCHED",
	4: "ORDER_STATUS_COMPLETED",
	5: "ORDER_STATUS_EXPIRED",
}

var OrderStatus_value = map[string]int32{
	"ORDER_STATUS_UNSPECIFIED":       0,
	"ORDER_STATUS_NOT_EXECUTED":      1,
	"ORDER_STATUS_NOT_MATCHED":       2,
	"ORDER_STATUS_PARTIALLY_MATCHED": 3,
	"ORDER_STATUS_COMPLETED":         4,
	"ORDER_STATUS_EXPIRED":           5,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}

func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92f7567bce1244ac, []int{1}
}

// Params defines the set of params for the bootstrap module.
type Params struct {
	// fee rate of the bootstrap creation
	CreationFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=creation_fee_rate,json=creationFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"creation_fee_rate"`
	// fee rate of the order to the protocol
	ProtocolFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=protocol_fee_rate,json=protocolFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"protocol_fee_rate"`
	// trading fee rate of the bootstrap pool for proposer's initial orders
	InitialTradingFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=initial_trading_fee_rate,json=initialTradingFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initial_trading_fee_rate"`
	// trading fee rate of the bootstrap pool for other orders
	TradingFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=trading_fee_rate,json=tradingFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"trading_fee_rate"`
	// reduction rate of the required voting power
	RequiredVotingPowerReductionRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=required_voting_power_reduction_rate,json=requiredVotingPowerReductionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"required_voting_power_reduction_rate"`
	// required voting power for the first stage
	RequiredVotingPower github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=required_voting_power,json=requiredVotingPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"required_voting_power"`
	// precision of the tick
	TickPrecision uint32                                 `protobuf:"varint,7,opt,name=tick_precision,json=tickPrecision,proto3" json:"tick_precision,omitempty"`
	OrderExtraGas github_com_cosmos_cosmos_sdk_types.Gas `protobuf:"varint,8,opt,name=order_extra_gas,json=orderExtraGas,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Gas" json:"order_extra_gas"`
	// vesting periods of the bootstrap coin
	VestingPeriods              []int64  `protobuf:"varint,9,rep,packed,name=vesting_periods,json=vestingPeriods,proto3" json:"vesting_periods,omitempty"`
	QuoteCoinWhitelist          []string `protobuf:"bytes,10,rep,name=quote_coin_whitelist,json=quoteCoinWhitelist,proto3" json:"quote_coin_whitelist,omitempty"`
	ProtocolFeeCollectorAddress string   `protobuf:"bytes,11,opt,name=protocol_fee_collector_address,json=protocolFeeCollectorAddress,proto3" json:"protocol_fee_collector_address,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f7567bce1244ac, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Order defines an order.
type Order struct {
	// id specifies the id of the order
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// bootstrap_pool_id specifies the bootstrap pool id
	BootstrapPoolId uint64 `protobuf:"varint,2,opt,name=bootstrap_pool_id,json=bootstrapPoolId,proto3" json:"bootstrap_pool_id,omitempty"`
	// msg_height specifies the block height when the order is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// orderer specifies the bech32-encoded address that makes an order
	Orderer string `protobuf:"bytes,4,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// direction specifies the order direction; either buy or sell
	Direction OrderDirection `protobuf:"varint,5,opt,name=direction,proto3,enum=crescent.bootstrap.v1beta1.OrderDirection" json:"direction,omitempty"`
	OfferCoin types.Coin     `protobuf:"bytes,6,opt,name=offer_coin,json=offerCoin,proto3" json:"offer_coin"`
	// remaining_offer_coin specifies the remaining offer coin
	RemainingOfferCoin types.Coin `protobuf:"bytes,7,opt,name=remaining_offer_coin,json=remainingOfferCoin,proto3" json:"remaining_offer_coin"`
	// received_coin specifies the received coin after the swap
	ReceivedCoin types.Coin `protobuf:"bytes,8,opt,name=received_coin,json=receivedCoin,proto3" json:"received_coin"`
	// price specifies the price that an orderer is willing to swap
	Price          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	Status         OrderStatus                            `protobuf:"varint,10,opt,name=status,proto3,enum=crescent.bootstrap.v1beta1.OrderStatus" json:"status,omitempty"`
	AssociateStage uint32                                 `protobuf:"varint,11,opt,name=associate_stage,json=associateStage,proto3" json:"associate_stage,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f7567bce1244ac, []int{1}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

// Pool defines bootstrap pool object
type BootstrapPool struct {
	// id of the bootstrap pool
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// denom of the base coin
	BaseCoinDenom string `protobuf:"bytes,2,opt,name=base_coin_denom,json=baseCoinDenom,proto3" json:"base_coin_denom,omitempty"`
	// denom of the quote coin
	QuoteCoinDenom string `protobuf:"bytes,3,opt,name=quote_coin_denom,json=quoteCoinDenom,proto3" json:"quote_coin_denom,omitempty"`
	// pair id of the liquidity module
	PairId uint64 `protobuf:"varint,4,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	// min price of the bootstrap coin
	MinPrice *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=min_price,json=minPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_price,omitempty"`
	// max price of the bootstrap coin
	MaxPrice *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=max_price,json=maxPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_price,omitempty"`
	// stages specifies the schedule of the bootstrap stages
	Stages []*Stage `protobuf:"bytes,7,rep,name=stages,proto3" json:"stages,omitempty"`
	// address of the proposer
	ProposerAddress string `protobuf:"bytes,8,opt,name=proposer_address,json=proposerAddress,proto3" json:"proposer_address,omitempty"`
	// address of the escrow account
	EscrowAddress string `protobuf:"bytes,9,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	// address of the fee collector (incl. dust colletor)
	FeeCollectorAddress   string                                  `protobuf:"bytes,10,opt,name=fee_collector_address,json=feeCollectorAddress,proto3" json:"fee_collector_address,omitempty"`
	CreationFeeRate       *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=creation_fee_rate,json=creationFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"creation_fee_rate,omitempty"`
	ProtocolFeeRate       *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=protocol_fee_rate,json=protocolFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"protocol_fee_rate,omitempty"`
	InitialTradingFeeRate *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=initial_trading_fee_rate,json=initialTradingFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initial_trading_fee_rate,omitempty"`
	TradingFeeRate        *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=trading_fee_rate,json=tradingFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"trading_fee_rate,omitempty"`
}

func (m *BootstrapPool) Reset()         { *m = BootstrapPool{} }
func (m *BootstrapPool) String() string { return proto.CompactTextString(m) }
func (*BootstrapPool) ProtoMessage()    {}
func (*BootstrapPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f7567bce1244ac, []int{2}
}
func (m *BootstrapPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapPool.Merge(m, src)
}
func (m *BootstrapPool) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapPool) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapPool.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapPool proto.InternalMessageInfo

type Stage struct {
	StartTime time.Time `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	EndTime   time.Time `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"start_time"`
}

func (m *Stage) Reset()         { *m = Stage{} }
func (m *Stage) String() string { return proto.CompactTextString(m) }
func (*Stage) ProtoMessage()    {}
func (*Stage) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f7567bce1244ac, []int{3}
}
func (m *Stage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stage.Merge(m, src)
}
func (m *Stage) XXX_Size() int {
	return m.Size()
}
func (m *Stage) XXX_DiscardUnknown() {
	xxx_messageInfo_Stage.DiscardUnknown(m)
}

var xxx_messageInfo_Stage proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("crescent.bootstrap.v1beta1.OrderDirection", OrderDirection_name, OrderDirection_value)
	proto.RegisterEnum("crescent.bootstrap.v1beta1.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterType((*Params)(nil), "crescent.bootstrap.v1beta1.Params")
	proto.RegisterType((*Order)(nil), "crescent.bootstrap.v1beta1.Order")
	proto.RegisterType((*BootstrapPool)(nil), "crescent.bootstrap.v1beta1.BootstrapPool")
	proto.RegisterType((*Stage)(nil), "crescent.bootstrap.v1beta1.Stage")
}

func init() {
	proto.RegisterFile("crescent/bootstrap/v1beta1/bootstrap.proto", fileDescriptor_92f7567bce1244ac)
}

var fileDescriptor_92f7567bce1244ac = []byte{
	// 1337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4f, 0x6f, 0x1a, 0x47,
	0x14, 0x07, 0x83, 0xc1, 0x8c, 0x03, 0xc6, 0x13, 0x3b, 0x5d, 0x13, 0x05, 0xb6, 0x56, 0x9b, 0x50,
	0x4b, 0x81, 0xc6, 0x8d, 0xd4, 0x26, 0x87, 0x54, 0x06, 0x36, 0x09, 0xaa, 0x63, 0xd3, 0x05, 0x27,
	0x4e, 0x2e, 0xab, 0x61, 0x77, 0x8c, 0x47, 0x81, 0x1d, 0x32, 0x33, 0xf8, 0xcf, 0xa5, 0xc7, 0x2a,
	0xe2, 0x94, 0x2f, 0x80, 0x14, 0xa9, 0x5f, 0xa2, 0xd7, 0xde, 0x72, 0x6b, 0x8e, 0x55, 0x0f, 0x69,
	0x9a, 0x5c, 0x7a, 0xea, 0xa1, 0x9f, 0xa0, 0x9a, 0xd9, 0x5d, 0xfe, 0xd8, 0x6e, 0x1b, 0xd3, 0x93,
	0x3d, 0x6f, 0xde, 0xef, 0xf7, 0x7b, 0xfb, 0xe6, 0xbd, 0x37, 0x03, 0x58, 0xb3, 0x19, 0xe6, 0x36,
	0x76, 0x45, 0xb1, 0x49, 0xa9, 0xe0, 0x82, 0xa1, 0x6e, 0xf1, 0xe0, 0x46, 0x13, 0x0b, 0x74, 0x63,
	0x64, 0x29, 0x74, 0x19, 0x15, 0x14, 0x66, 0x02, 0xdf, 0xc2, 0x68, 0xc7, 0xf7, 0xcd, 0x2c, 0xb5,
	0x68, 0x8b, 0x2a, 0xb7, 0xa2, 0xfc, 0xcf, 0x43, 0x64, 0x56, 0x6c, 0xca, 0x3b, 0x94, 0x5b, 0xde,
	0x86, 0xb7, 0xf0, 0xb7, 0xb2, 0xde, 0xaa, 0xd8, 0x44, 0x1c, 0x0f, 0x15, 0x6d, 0x4a, 0x5c, 0x7f,
	0x3f, 0xd7, 0xa2, 0xb4, 0xd5, 0xc6, 0x45, 0xb5, 0x6a, 0xf6, 0xf6, 0x8a, 0x82, 0x74, 0x30, 0x17,
	0xa8, 0xe3, 0x47, 0xb3, 0xfa, 0x7d, 0x1c, 0xc4, 0x6a, 0x88, 0xa1, 0x0e, 0x87, 0x4f, 0xc0, 0xa2,
	0xcd, 0x30, 0x12, 0x84, 0xba, 0xd6, 0x1e, 0xc6, 0x16, 0x43, 0x02, 0x6b, 0x61, 0x3d, 0x9c, 0x4f,
	0x94, 0x0a, 0xaf, 0xde, 0xe4, 0x42, 0xbf, 0xbe, 0xc9, 0x5d, 0x6d, 0x11, 0xb1, 0xdf, 0x6b, 0x16,
	0x6c, 0xda, 0xf1, 0xe3, 0xf0, 0xff, 0x5c, 0xe7, 0xce, 0xd3, 0xa2, 0x38, 0xee, 0x62, 0x5e, 0xa8,
	0x60, 0xdb, 0x5c, 0x08, 0x88, 0xee, 0x62, 0x6c, 0x22, 0x81, 0x25, 0xb7, 0xd2, 0xb3, 0x69, 0x7b,
	0xc4, 0x3d, 0x33, 0x1d, 0x77, 0x40, 0x14, 0x70, 0xb7, 0x80, 0x46, 0x5c, 0x22, 0x08, 0x6a, 0x5b,
	0x82, 0x21, 0x87, 0xb8, 0xad, 0x91, 0x44, 0x64, 0x2a, 0x89, 0x65, 0x9f, 0xaf, 0xe1, 0xd1, 0x05,
	0x42, 0xbb, 0x20, 0x7d, 0x4a, 0x20, 0x3a, 0x95, 0x40, 0x4a, 0x4c, 0x32, 0x7f, 0x07, 0x3e, 0x61,
	0xf8, 0x59, 0x8f, 0x30, 0xec, 0x58, 0x07, 0x54, 0x48, 0x85, 0x2e, 0x3d, 0xc4, 0xcc, 0x62, 0xd8,
	0xe9, 0xd9, 0xea, 0x44, 0x94, 0xda, 0xec, 0x54, 0x6a, 0x7a, 0xc0, 0xfd, 0x50, 0x51, 0xd7, 0x24,
	0xb3, 0x19, 0x10, 0x2b, 0xfd, 0x26, 0x58, 0x3e, 0x53, 0x5f, 0x8b, 0x9d, 0x5b, 0xb0, 0xea, 0x0a,
	0xf3, 0xe2, 0x19, 0x82, 0xf0, 0x53, 0x90, 0x12, 0xc4, 0x7e, 0x6a, 0x75, 0x19, 0xb6, 0x09, 0x27,
	0xd4, 0xd5, 0xe2, 0x7a, 0x38, 0x9f, 0x34, 0x93, 0xd2, 0x5a, 0x0b, 0x8c, 0xf0, 0x21, 0x58, 0xa0,
	0xcc, 0xc1, 0xcc, 0xc2, 0x47, 0x82, 0x21, 0xab, 0x85, 0xb8, 0x36, 0xa7, 0x87, 0xf3, 0xd1, 0x73,
	0x05, 0x71, 0x0f, 0x71, 0x33, 0xa9, 0x68, 0x0c, 0xc9, 0x72, 0x0f, 0x71, 0x78, 0x0d, 0x2c, 0x1c,
	0x60, 0xee, 0x7d, 0x1a, 0x66, 0x84, 0x3a, 0x5c, 0x4b, 0xe8, 0x91, 0x7c, 0xc4, 0x4c, 0xf9, 0xe6,
	0x9a, 0x67, 0x85, 0x9f, 0x83, 0xa5, 0x67, 0x3d, 0x2a, 0xb0, 0x25, 0xdb, 0xc8, 0x3a, 0xdc, 0x27,
	0x02, 0xb7, 0x09, 0x17, 0x1a, 0xd0, 0x23, 0xf9, 0x84, 0x09, 0xd5, 0x5e, 0x99, 0x12, 0xf7, 0x51,
	0xb0, 0x03, 0xcb, 0x20, 0x3b, 0x51, 0xdc, 0x36, 0x6d, 0xb7, 0xb1, 0x2d, 0x28, 0xb3, 0x90, 0xe3,
	0x30, 0xcc, 0xb9, 0x36, 0x2f, 0xd3, 0x68, 0x5e, 0x1e, 0xab, 0xdc, 0x72, 0xe0, 0xb3, 0xe1, 0xb9,
	0xac, 0xfe, 0x1c, 0x05, 0xb3, 0xdb, 0x32, 0x62, 0x98, 0x02, 0x33, 0xc4, 0x51, 0x8d, 0x17, 0x35,
	0x67, 0x88, 0x03, 0xd7, 0xc0, 0xe2, 0x70, 0x52, 0x58, 0x5d, 0x4a, 0xdb, 0x16, 0x71, 0x54, 0xef,
	0x44, 0xcd, 0x85, 0xe1, 0x46, 0x8d, 0xd2, 0x76, 0xd5, 0x81, 0x57, 0x00, 0xe8, 0xf0, 0x96, 0xb5,
	0x8f, 0x49, 0x6b, 0x5f, 0xa8, 0xea, 0x8f, 0x98, 0x89, 0x0e, 0x6f, 0xdd, 0x57, 0x06, 0xa8, 0x81,
	0xb8, 0xca, 0x0a, 0x66, 0x5e, 0xe1, 0x9a, 0xc1, 0x12, 0xde, 0x07, 0x09, 0x87, 0x30, 0xac, 0x4a,
	0x42, 0x95, 0x59, 0x6a, 0x7d, 0xad, 0xf0, 0xcf, 0x93, 0xaa, 0xa0, 0x42, 0xad, 0x04, 0x08, 0x73,
	0x04, 0x86, 0x77, 0x00, 0xa0, 0x7b, 0x7b, 0x98, 0xa9, 0xfc, 0xa9, 0x02, 0x9a, 0x5f, 0x5f, 0x29,
	0xf8, 0x53, 0x4b, 0xce, 0xa9, 0x21, 0x87, 0xcc, 0x62, 0x29, 0x2a, 0x8f, 0xd5, 0x4c, 0x28, 0x88,
	0x34, 0xc0, 0x6f, 0xc1, 0x12, 0xc3, 0x1d, 0x44, 0x5c, 0x79, 0x54, 0x63, 0x4c, 0xf1, 0x0f, 0x63,
	0x82, 0x43, 0xf0, 0xf6, 0x90, 0xb2, 0x02, 0x92, 0x0c, 0xdb, 0x98, 0x1c, 0x60, 0xc7, 0xe3, 0x9a,
	0xfb, 0x30, 0xae, 0x0b, 0x01, 0xca, 0x67, 0x99, 0xed, 0x32, 0x62, 0x63, 0x2d, 0x31, 0x55, 0x17,
	0x7a, 0x60, 0xf8, 0x35, 0x88, 0x71, 0x81, 0x44, 0x8f, 0x6b, 0x40, 0x65, 0xf9, 0xda, 0x7f, 0x66,
	0xb9, 0xae, 0xdc, 0x4d, 0x1f, 0x26, 0x0b, 0x19, 0x71, 0x4e, 0x6d, 0x82, 0x04, 0xb6, 0xb8, 0x40,
	0x2d, 0xac, 0xca, 0x2b, 0x69, 0xa6, 0x86, 0xe6, 0xba, 0xb4, 0xae, 0xbe, 0x8d, 0x81, 0x64, 0x69,
	0xbc, 0x3e, 0x4e, 0x55, 0xd6, 0x55, 0xb0, 0x20, 0x3f, 0xdd, 0xab, 0x74, 0x07, 0xbb, 0xb4, 0xe3,
	0xcd, 0x64, 0x33, 0x29, 0xcd, 0xf2, 0xa3, 0x2b, 0xd2, 0x08, 0xf3, 0x20, 0x3d, 0xd6, 0x12, 0x9e,
	0xa3, 0x9a, 0xac, 0x66, 0x6a, 0xd8, 0x0e, 0x9e, 0xe7, 0x47, 0x20, 0xde, 0x45, 0x84, 0xc9, 0x0a,
	0x8d, 0x2a, 0x99, 0x98, 0x5c, 0x56, 0x1d, 0xf8, 0x0d, 0x48, 0x74, 0x88, 0x6b, 0x79, 0x09, 0x1c,
	0x8d, 0xb1, 0xf0, 0x39, 0x12, 0x38, 0xd7, 0x21, 0x6e, 0x4d, 0xe5, 0x50, 0x92, 0xa1, 0x23, 0x9f,
	0x2c, 0x36, 0x25, 0x19, 0x3a, 0xf2, 0xc8, 0x6e, 0xa9, 0x03, 0x69, 0x61, 0xae, 0xc5, 0xf5, 0x48,
	0x7e, 0x7e, 0xfd, 0xe3, 0x7f, 0x3b, 0x10, 0x95, 0x59, 0xd3, 0x07, 0xc0, 0xcf, 0x40, 0xba, 0xcb,
	0x68, 0x97, 0x72, 0x3c, 0x6a, 0xf5, 0x39, 0x95, 0x97, 0x85, 0xc0, 0xee, 0xb7, 0xb7, 0x9c, 0x7e,
	0x98, 0xdb, 0x8c, 0x1e, 0x0e, 0x1d, 0x13, 0x5e, 0xa6, 0x3d, 0x6b, 0xe0, 0xb6, 0x0e, 0x96, 0xcf,
	0x9e, 0x20, 0x40, 0x79, 0x5f, 0xdc, 0x3b, 0x3d, 0x39, 0xce, 0xbe, 0xb7, 0xe7, 0xa7, 0xca, 0xca,
	0x87, 0xdd, 0xdb, 0x17, 0xa6, 0xe3, 0x3e, 0xcf, 0xbd, 0x9d, 0x9c, 0x4a, 0xe2, 0x1c, 0xf7, 0x76,
	0x6a, 0x2a, 0x81, 0x13, 0xf7, 0xf6, 0xea, 0x4f, 0x61, 0x30, 0xab, 0x4a, 0x02, 0xee, 0x02, 0xc0,
	0x05, 0x62, 0xc2, 0x92, 0x0f, 0x2c, 0xd5, 0x62, 0xf3, 0xeb, 0x99, 0x82, 0xf7, 0xfa, 0x2a, 0x04,
	0xaf, 0xaf, 0x42, 0x23, 0x78, 0x7d, 0x95, 0xae, 0xc8, 0xe9, 0xf1, 0xd7, 0x9b, 0xdc, 0xe2, 0x31,
	0xea, 0xb4, 0x6f, 0xaf, 0x8e, 0xb0, 0xab, 0x2f, 0x7e, 0xcb, 0x85, 0xcd, 0x84, 0x32, 0x48, 0x77,
	0xd8, 0x00, 0x73, 0xd8, 0x75, 0x3c, 0xde, 0x99, 0xff, 0xcb, 0x1b, 0xc7, 0xae, 0x23, 0x9d, 0x6f,
	0xcf, 0x3d, 0x7f, 0x99, 0x0b, 0xfd, 0xf1, 0x32, 0x17, 0x5a, 0xfb, 0x31, 0x0c, 0x52, 0x93, 0xd3,
	0x1c, 0xde, 0x01, 0x97, 0xb7, 0xcd, 0x8a, 0x61, 0x5a, 0x95, 0xaa, 0x69, 0x94, 0x1b, 0xd5, 0xed,
	0x2d, 0x6b, 0x67, 0xab, 0x5e, 0x33, 0xca, 0xd5, 0xbb, 0x55, 0xa3, 0x92, 0x0e, 0x65, 0xae, 0xf4,
	0x07, 0xfa, 0xca, 0x24, 0x68, 0xc7, 0xe5, 0x5d, 0x6c, 0x93, 0x3d, 0x82, 0x1d, 0x58, 0x00, 0x17,
	0x4f, 0xe2, 0x4b, 0x3b, 0x8f, 0xd3, 0xe1, 0xcc, 0x72, 0x7f, 0xa0, 0x2f, 0x4e, 0xe2, 0x4a, 0xbd,
	0x63, 0x79, 0xe5, 0x9e, 0xf4, 0xaf, 0x1b, 0x9b, 0x9b, 0xe9, 0x99, 0xcc, 0xa5, 0xfe, 0x40, 0x87,
	0x93, 0x80, 0x3a, 0x6e, 0xb7, 0x33, 0xd1, 0xe7, 0x3f, 0x64, 0x43, 0x6b, 0x7f, 0xce, 0x80, 0xf9,
	0xb1, 0x11, 0x09, 0xbf, 0x02, 0x9a, 0xc7, 0x53, 0x6f, 0x6c, 0x34, 0x76, 0xea, 0x27, 0x82, 0xce,
	0xf4, 0x07, 0xfa, 0xa5, 0x31, 0xf7, 0xf1, 0x88, 0x6f, 0x81, 0x95, 0x09, 0xe4, 0xd6, 0x76, 0xc3,
	0x32, 0x76, 0x8d, 0xf2, 0x4e, 0xc3, 0xa8, 0xa4, 0xc3, 0xa7, 0xa0, 0x5b, 0x54, 0x18, 0x47, 0xd8,
	0xee, 0x09, 0xec, 0xc0, 0x2f, 0x4f, 0x88, 0x4a, 0xe8, 0x83, 0x8d, 0x46, 0xf9, 0xbe, 0x51, 0x49,
	0xcf, 0x64, 0x56, 0xfa, 0x03, 0x7d, 0x79, 0x12, 0xf9, 0x00, 0x09, 0x7b, 0x1f, 0x3b, 0xf2, 0xd9,
	0x30, 0x01, 0xac, 0x6d, 0x98, 0x8d, 0xea, 0xc6, 0xe6, 0xe6, 0xe3, 0x21, 0x3c, 0x92, 0xc9, 0xf5,
	0x07, 0xfa, 0xe5, 0x31, 0x78, 0x0d, 0x31, 0x59, 0xe0, 0xed, 0xe3, 0x80, 0xe4, 0x26, 0xb8, 0x34,
	0x41, 0x52, 0xde, 0x7e, 0x50, 0xdb, 0x34, 0x64, 0xd4, 0xd1, 0x8c, 0xd6, 0x1f, 0xe8, 0x4b, 0x63,
	0xe0, 0x32, 0xed, 0x74, 0xdb, 0x58, 0xc6, 0x3c, 0x4c, 0xb8, 0x8f, 0x32, 0x76, 0x6b, 0x55, 0xd3,
	0xa8, 0xa4, 0x67, 0xc7, 0x12, 0xee, 0x61, 0x8c, 0xa3, 0xae, 0x7c, 0xc8, 0x79, 0x09, 0x2f, 0x3d,
	0x7a, 0xf5, 0x7b, 0x36, 0xf4, 0xea, 0x5d, 0x36, 0xfc, 0xfa, 0x5d, 0x36, 0xfc, 0xf6, 0x5d, 0x36,
	0xfc, 0xe2, 0x7d, 0x36, 0xf4, 0xfa, 0x7d, 0x36, 0xf4, 0xcb, 0xfb, 0x6c, 0xe8, 0xc9, 0xad, 0xf1,
	0x2e, 0xf2, 0x67, 0xe8, 0x75, 0x17, 0x8b, 0x43, 0xca, 0x9e, 0x0e, 0x0d, 0xc5, 0x83, 0x9b, 0xc5,
	0xa3, 0xb1, 0x9f, 0x49, 0xaa, 0xb9, 0x9a, 0x31, 0x55, 0xca, 0x5f, 0xfc, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xb8, 0x61, 0x0a, 0x42, 0x49, 0x0d, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocolFeeCollectorAddress) > 0 {
		i -= len(m.ProtocolFeeCollectorAddress)
		copy(dAtA[i:], m.ProtocolFeeCollectorAddress)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.ProtocolFeeCollectorAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.QuoteCoinWhitelist) > 0 {
		for iNdEx := len(m.QuoteCoinWhitelist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QuoteCoinWhitelist[iNdEx])
			copy(dAtA[i:], m.QuoteCoinWhitelist[iNdEx])
			i = encodeVarintBootstrap(dAtA, i, uint64(len(m.QuoteCoinWhitelist[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.VestingPeriods) > 0 {
		dAtA2 := make([]byte, len(m.VestingPeriods)*10)
		var j1 int
		for _, num1 := range m.VestingPeriods {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintBootstrap(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if m.OrderExtraGas != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.OrderExtraGas))
		i--
		dAtA[i] = 0x40
	}
	if m.TickPrecision != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.TickPrecision))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.RequiredVotingPower.Size()
		i -= size
		if _, err := m.RequiredVotingPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.RequiredVotingPowerReductionRate.Size()
		i -= size
		if _, err := m.RequiredVotingPowerReductionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TradingFeeRate.Size()
		i -= size
		if _, err := m.TradingFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.InitialTradingFeeRate.Size()
		i -= size
		if _, err := m.InitialTradingFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ProtocolFeeRate.Size()
		i -= size
		if _, err := m.ProtocolFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CreationFeeRate.Size()
		i -= size
		if _, err := m.CreationFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssociateStage != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.AssociateStage))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.ReceivedCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.RemainingOfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.OfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBootstrap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Direction != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Orderer) > 0 {
		i -= len(m.Orderer)
		copy(dAtA[i:], m.Orderer)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Orderer)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgHeight != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.BootstrapPoolId != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.BootstrapPoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BootstrapPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootstrapPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingFeeRate != nil {
		{
			size := m.TradingFeeRate.Size()
			i -= size
			if _, err := m.TradingFeeRate.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.InitialTradingFeeRate != nil {
		{
			size := m.InitialTradingFeeRate.Size()
			i -= size
			if _, err := m.InitialTradingFeeRate.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ProtocolFeeRate != nil {
		{
			size := m.ProtocolFeeRate.Size()
			i -= size
			if _, err := m.ProtocolFeeRate.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.CreationFeeRate != nil {
		{
			size := m.CreationFeeRate.Size()
			i -= size
			if _, err := m.CreationFeeRate.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FeeCollectorAddress) > 0 {
		i -= len(m.FeeCollectorAddress)
		copy(dAtA[i:], m.FeeCollectorAddress)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.FeeCollectorAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ProposerAddress) > 0 {
		i -= len(m.ProposerAddress)
		copy(dAtA[i:], m.ProposerAddress)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.ProposerAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Stages) > 0 {
		for iNdEx := len(m.Stages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBootstrap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MaxPrice != nil {
		{
			size := m.MaxPrice.Size()
			i -= size
			if _, err := m.MaxPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MinPrice != nil {
		{
			size := m.MinPrice.Size()
			i -= size
			if _, err := m.MinPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBootstrap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PairId != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.QuoteCoinDenom) > 0 {
		i -= len(m.QuoteCoinDenom)
		copy(dAtA[i:], m.QuoteCoinDenom)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.QuoteCoinDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseCoinDenom) > 0 {
		i -= len(m.BaseCoinDenom)
		copy(dAtA[i:], m.BaseCoinDenom)
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.BaseCoinDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Stage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintBootstrap(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x12
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintBootstrap(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintBootstrap(dAtA []byte, offset int, v uint64) int {
	offset -= sovBootstrap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CreationFeeRate.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	l = m.ProtocolFeeRate.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	l = m.InitialTradingFeeRate.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	l = m.TradingFeeRate.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	l = m.RequiredVotingPowerReductionRate.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	l = m.RequiredVotingPower.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	if m.TickPrecision != 0 {
		n += 1 + sovBootstrap(uint64(m.TickPrecision))
	}
	if m.OrderExtraGas != 0 {
		n += 1 + sovBootstrap(uint64(m.OrderExtraGas))
	}
	if len(m.VestingPeriods) > 0 {
		l = 0
		for _, e := range m.VestingPeriods {
			l += sovBootstrap(uint64(e))
		}
		n += 1 + sovBootstrap(uint64(l)) + l
	}
	if len(m.QuoteCoinWhitelist) > 0 {
		for _, s := range m.QuoteCoinWhitelist {
			l = len(s)
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	l = len(m.ProtocolFeeCollectorAddress)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBootstrap(uint64(m.Id))
	}
	if m.BootstrapPoolId != 0 {
		n += 1 + sovBootstrap(uint64(m.BootstrapPoolId))
	}
	if m.MsgHeight != 0 {
		n += 1 + sovBootstrap(uint64(m.MsgHeight))
	}
	l = len(m.Orderer)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovBootstrap(uint64(m.Direction))
	}
	l = m.OfferCoin.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	l = m.RemainingOfferCoin.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	l = m.ReceivedCoin.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovBootstrap(uint64(l))
	if m.Status != 0 {
		n += 1 + sovBootstrap(uint64(m.Status))
	}
	if m.AssociateStage != 0 {
		n += 1 + sovBootstrap(uint64(m.AssociateStage))
	}
	return n
}

func (m *BootstrapPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBootstrap(uint64(m.Id))
	}
	l = len(m.BaseCoinDenom)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.QuoteCoinDenom)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.PairId != 0 {
		n += 1 + sovBootstrap(uint64(m.PairId))
	}
	if m.MinPrice != nil {
		l = m.MinPrice.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.MaxPrice != nil {
		l = m.MaxPrice.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if len(m.Stages) > 0 {
		for _, e := range m.Stages {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	l = len(m.ProposerAddress)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.FeeCollectorAddress)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.CreationFeeRate != nil {
		l = m.CreationFeeRate.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.ProtocolFeeRate != nil {
		l = m.ProtocolFeeRate.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.InitialTradingFeeRate != nil {
		l = m.InitialTradingFeeRate.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.TradingFeeRate != nil {
		l = m.TradingFeeRate.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *Stage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovBootstrap(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovBootstrap(uint64(l))
	return n
}

func sovBootstrap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBootstrap(x uint64) (n int) {
	return sovBootstrap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreationFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTradingFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialTradingFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradingFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredVotingPowerReductionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredVotingPowerReductionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredVotingPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredVotingPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickPrecision", wireType)
			}
			m.TickPrecision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickPrecision |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderExtraGas", wireType)
			}
			m.OrderExtraGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderExtraGas |= github_com_cosmos_cosmos_sdk_types.Gas(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBootstrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VestingPeriods = append(m.VestingPeriods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBootstrap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBootstrap
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBootstrap
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VestingPeriods) == 0 {
					m.VestingPeriods = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBootstrap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VestingPeriods = append(m.VestingPeriods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriods", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteCoinWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteCoinWhitelist = append(m.QuoteCoinWhitelist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeeCollectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolFeeCollectorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapPoolId", wireType)
			}
			m.BootstrapPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BootstrapPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= OrderDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingOfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingOfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReceivedCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssociateStage", wireType)
			}
			m.AssociateStage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssociateStage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.MinPrice = &v
			if err := m.MinPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.MaxPrice = &v
			if err := m.MaxPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stages = append(m.Stages, &Stage{})
			if err := m.Stages[len(m.Stages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCollectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCollectorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.CreationFeeRate = &v
			if err := m.CreationFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.ProtocolFeeRate = &v
			if err := m.ProtocolFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTradingFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.InitialTradingFeeRate = &v
			if err := m.InitialTradingFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.TradingFeeRate = &v
			if err := m.TradingFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBootstrap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBootstrap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBootstrap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBootstrap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBootstrap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBootstrap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBootstrap = fmt.Errorf("proto: unexpected end of group")
)
