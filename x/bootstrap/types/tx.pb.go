// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/bootstrap/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgLimitOrder defines an SDK message for making a limit order
type MsgLimitOrder struct {
	// orderer specifies the bech32-encoded address that makes an order
	Orderer string `protobuf:"bytes,1,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// bootstrap_pool_id specifies the bootstrap pool id
	BootstrapPoolId uint64 `protobuf:"varint,2,opt,name=bootstrap_pool_id,json=bootstrapPoolId,proto3" json:"bootstrap_pool_id,omitempty"`
	// direction specifies the order direction(buy or sell)
	Direction OrderDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=crescent.bootstrap.v1beta1.OrderDirection" json:"direction,omitempty"`
	// offer_coin specifies the amount of coin the orderer offers
	OfferCoin types.Coin `protobuf:"bytes,4,opt,name=offer_coin,json=offerCoin,proto3" json:"offer_coin"`
	// price specifies the order price
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
}

func (m *MsgLimitOrder) Reset()         { *m = MsgLimitOrder{} }
func (m *MsgLimitOrder) String() string { return proto.CompactTextString(m) }
func (*MsgLimitOrder) ProtoMessage()    {}
func (*MsgLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8a1913173b4ec0, []int{0}
}
func (m *MsgLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLimitOrder.Merge(m, src)
}
func (m *MsgLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLimitOrder proto.InternalMessageInfo

// MsgLimitOrderResponse defines the Msg/LimitOrder response type.
type MsgLimitOrderResponse struct {
}

func (m *MsgLimitOrderResponse) Reset()         { *m = MsgLimitOrderResponse{} }
func (m *MsgLimitOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLimitOrderResponse) ProtoMessage()    {}
func (*MsgLimitOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8a1913173b4ec0, []int{1}
}
func (m *MsgLimitOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLimitOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLimitOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLimitOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLimitOrderResponse.Merge(m, src)
}
func (m *MsgLimitOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLimitOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLimitOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLimitOrderResponse proto.InternalMessageInfo

// MsgModifyOrder defines an SDK message for modifying a limit order
type MsgModifyOrder struct {
	// orderer specifies the bech32-encoded address that modifies an order
	Orderer string `protobuf:"bytes,1,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// bootstrap_pool_id specifies the bootstrap pool id
	BootstrapPoolId uint64 `protobuf:"varint,2,opt,name=bootstrap_pool_id,json=bootstrapPoolId,proto3" json:"bootstrap_pool_id,omitempty"`
	// order_id specifies the order id
	OrderId uint64 `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// offer_coin specifies the amount of coin the orderer offers
	OfferCoin types.Coin `protobuf:"bytes,4,opt,name=offer_coin,json=offerCoin,proto3" json:"offer_coin"`
	// price specifies the order price
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
}

func (m *MsgModifyOrder) Reset()         { *m = MsgModifyOrder{} }
func (m *MsgModifyOrder) String() string { return proto.CompactTextString(m) }
func (*MsgModifyOrder) ProtoMessage()    {}
func (*MsgModifyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8a1913173b4ec0, []int{2}
}
func (m *MsgModifyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyOrder.Merge(m, src)
}
func (m *MsgModifyOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyOrder proto.InternalMessageInfo

// MsgModifyOrderResponse defines the Msg/ModifyOrder response type.
type MsgModifyOrderResponse struct {
}

func (m *MsgModifyOrderResponse) Reset()         { *m = MsgModifyOrderResponse{} }
func (m *MsgModifyOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgModifyOrderResponse) ProtoMessage()    {}
func (*MsgModifyOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8a1913173b4ec0, []int{3}
}
func (m *MsgModifyOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyOrderResponse.Merge(m, src)
}
func (m *MsgModifyOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyOrderResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgLimitOrder)(nil), "crescent.bootstrap.v1beta1.MsgLimitOrder")
	proto.RegisterType((*MsgLimitOrderResponse)(nil), "crescent.bootstrap.v1beta1.MsgLimitOrderResponse")
	proto.RegisterType((*MsgModifyOrder)(nil), "crescent.bootstrap.v1beta1.MsgModifyOrder")
	proto.RegisterType((*MsgModifyOrderResponse)(nil), "crescent.bootstrap.v1beta1.MsgModifyOrderResponse")
}

func init() {
	proto.RegisterFile("crescent/bootstrap/v1beta1/tx.proto", fileDescriptor_eb8a1913173b4ec0)
}

var fileDescriptor_eb8a1913173b4ec0 = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0xb5, 0x03, 0xea, 0x89, 0x21, 0x22, 0x7e, 0xa4, 0x39, 0xa4, 0x55, 0x91, 0x50,
	0xa9, 0x34, 0x5b, 0x2d, 0x5c, 0xb8, 0x70, 0x28, 0x3d, 0x30, 0x89, 0x0a, 0x94, 0x0b, 0x12, 0x97,
	0xaa, 0x49, 0xdc, 0x60, 0xd6, 0xe4, 0x45, 0xb6, 0x37, 0xb6, 0xff, 0x82, 0x7f, 0x82, 0xff, 0xa5,
	0xc7, 0x1d, 0x11, 0x87, 0x69, 0xb4, 0x7f, 0x04, 0x57, 0x14, 0xc7, 0xc9, 0xd2, 0x03, 0x63, 0x07,
	0x0e, 0x9c, 0xe2, 0xe7, 0xf7, 0xfd, 0xbe, 0x67, 0x7f, 0x9c, 0x87, 0x9f, 0x84, 0x82, 0xc9, 0x90,
	0xa5, 0x8a, 0x06, 0x00, 0x4a, 0x2a, 0x31, 0xcf, 0xe8, 0xc9, 0x30, 0x60, 0x6a, 0x3e, 0xa4, 0xea,
	0x94, 0x64, 0x02, 0x14, 0xd8, 0x6e, 0x29, 0x22, 0x95, 0x88, 0x18, 0x91, 0xfb, 0x20, 0x86, 0x18,
	0xb4, 0x8c, 0xe6, 0xab, 0xc2, 0xe1, 0xb6, 0x43, 0x90, 0x09, 0xc8, 0x59, 0x91, 0x28, 0x02, 0x93,
	0xf2, 0x8a, 0x88, 0x06, 0x73, 0xc9, 0xaa, 0x56, 0x21, 0xf0, 0xd4, 0xe4, 0x3b, 0x31, 0x40, 0xbc,
	0x64, 0x54, 0x47, 0xc1, 0xf1, 0x82, 0x2a, 0x9e, 0x30, 0xa9, 0xe6, 0x49, 0x66, 0x04, 0x83, 0x6b,
	0x8e, 0x7c, 0x75, 0x3e, 0xad, 0xed, 0x7d, 0xdb, 0xc1, 0x77, 0xa7, 0x32, 0x7e, 0xcb, 0x13, 0xae,
	0xde, 0x89, 0x88, 0x09, 0xdb, 0xc1, 0xb7, 0x21, 0x5f, 0x30, 0xe1, 0xa0, 0x2e, 0xea, 0xb7, 0xfc,
	0x32, 0xb4, 0x07, 0xf8, 0x7e, 0x65, 0x9f, 0x65, 0x00, 0xcb, 0x19, 0x8f, 0x9c, 0x9d, 0x2e, 0xea,
	0x37, 0xfd, 0x7b, 0x55, 0xe2, 0x3d, 0xc0, 0xf2, 0x30, 0xb2, 0xdf, 0xe0, 0x56, 0xc4, 0x05, 0x0b,
	0x15, 0x87, 0xd4, 0x69, 0x74, 0x51, 0x7f, 0x7f, 0x34, 0x20, 0x7f, 0xa6, 0x44, 0x74, 0xef, 0x49,
	0xe9, 0xf0, 0xaf, 0xcc, 0xf6, 0x2b, 0x8c, 0x61, 0xb1, 0x60, 0x62, 0x96, 0x23, 0x70, 0x9a, 0x5d,
	0xd4, 0xdf, 0x1b, 0xb5, 0x89, 0x21, 0x96, 0x33, 0xaa, 0x6a, 0xbc, 0x06, 0x9e, 0x8e, 0x9b, 0xab,
	0x8b, 0x8e, 0xe5, 0xb7, 0xb4, 0x25, 0xdf, 0xb0, 0x27, 0x78, 0x37, 0x13, 0x3c, 0x64, 0xce, 0x6e,
	0x7e, 0x9b, 0x31, 0xc9, 0xf3, 0x3f, 0x2e, 0x3a, 0x4f, 0x63, 0xae, 0x3e, 0x1d, 0x07, 0x24, 0x84,
	0xc4, 0xe0, 0x37, 0x9f, 0x03, 0x19, 0x1d, 0x51, 0x75, 0x96, 0x31, 0x49, 0x26, 0x2c, 0xf4, 0x0b,
	0x73, 0xef, 0x31, 0x7e, 0xb8, 0x85, 0xc9, 0x67, 0x32, 0x83, 0x54, 0xb2, 0xde, 0x2f, 0x84, 0xf7,
	0xa7, 0x32, 0x9e, 0x42, 0xc4, 0x17, 0x67, 0xff, 0x92, 0x60, 0x1b, 0xdf, 0xd1, 0xb6, 0x5c, 0xd2,
	0xd0, 0x92, 0xa2, 0xcc, 0x61, 0xf4, 0x9f, 0x20, 0x71, 0xf0, 0xa3, 0xed, 0x8b, 0x97, 0x4c, 0x46,
	0x97, 0x08, 0x37, 0xa6, 0x32, 0xb6, 0x3f, 0x63, 0x5c, 0xfb, 0xb1, 0x9e, 0x5d, 0xf7, 0xfe, 0x5b,
	0x70, 0xdd, 0xe1, 0x8d, 0xa5, 0x65, 0x4f, 0x3b, 0xc1, 0x7b, 0xf5, 0x37, 0x18, 0xfc, 0xa5, 0x42,
	0x4d, 0xeb, 0x8e, 0x6e, 0xae, 0x2d, 0xdb, 0x8d, 0x3f, 0xac, 0x7e, 0x7a, 0xd6, 0x6a, 0xed, 0xa1,
	0xf3, 0xb5, 0x87, 0x2e, 0xd7, 0x1e, 0xfa, 0xba, 0xf1, 0xac, 0xf3, 0x8d, 0x67, 0x7d, 0xdf, 0x78,
	0xd6, 0xc7, 0x97, 0x75, 0x92, 0xa6, 0xf6, 0x41, 0xca, 0xd4, 0x17, 0x10, 0x47, 0xd5, 0x06, 0x3d,
	0x79, 0x41, 0x4f, 0x6b, 0x23, 0xaa, 0x01, 0x07, 0xb7, 0xf4, 0x5c, 0x3e, 0xff, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x89, 0x1b, 0xfb, 0x6f, 0x78, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	LimitOrder(ctx context.Context, in *MsgLimitOrder, opts ...grpc.CallOption) (*MsgLimitOrderResponse, error)
	ModifyOrder(ctx context.Context, in *MsgModifyOrder, opts ...grpc.CallOption) (*MsgModifyOrderResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) LimitOrder(ctx context.Context, in *MsgLimitOrder, opts ...grpc.CallOption) (*MsgLimitOrderResponse, error) {
	out := new(MsgLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/crescent.bootstrap.v1beta1.Msg/LimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ModifyOrder(ctx context.Context, in *MsgModifyOrder, opts ...grpc.CallOption) (*MsgModifyOrderResponse, error) {
	out := new(MsgModifyOrderResponse)
	err := c.cc.Invoke(ctx, "/crescent.bootstrap.v1beta1.Msg/ModifyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	LimitOrder(context.Context, *MsgLimitOrder) (*MsgLimitOrderResponse, error)
	ModifyOrder(context.Context, *MsgModifyOrder) (*MsgModifyOrderResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) LimitOrder(ctx context.Context, req *MsgLimitOrder) (*MsgLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrder not implemented")
}
func (*UnimplementedMsgServer) ModifyOrder(ctx context.Context, req *MsgModifyOrder) (*MsgModifyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrder not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_LimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLimitOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.bootstrap.v1beta1.Msg/LimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LimitOrder(ctx, req.(*MsgLimitOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ModifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModifyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ModifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.bootstrap.v1beta1.Msg/ModifyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ModifyOrder(ctx, req.(*MsgModifyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crescent.bootstrap.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LimitOrder",
			Handler:    _Msg_LimitOrder_Handler,
		},
		{
			MethodName: "ModifyOrder",
			Handler:    _Msg_ModifyOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crescent/bootstrap/v1beta1/tx.proto",
}

func (m *MsgLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.OfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Direction != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x18
	}
	if m.BootstrapPoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BootstrapPoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Orderer) > 0 {
		i -= len(m.Orderer)
		copy(dAtA[i:], m.Orderer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orderer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLimitOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLimitOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLimitOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgModifyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.OfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.BootstrapPoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BootstrapPoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Orderer) > 0 {
		i -= len(m.Orderer)
		copy(dAtA[i:], m.Orderer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orderer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgModifyOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orderer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BootstrapPoolId != 0 {
		n += 1 + sovTx(uint64(m.BootstrapPoolId))
	}
	if m.Direction != 0 {
		n += 1 + sovTx(uint64(m.Direction))
	}
	l = m.OfferCoin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgLimitOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgModifyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orderer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BootstrapPoolId != 0 {
		n += 1 + sovTx(uint64(m.BootstrapPoolId))
	}
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	l = m.OfferCoin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgModifyOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapPoolId", wireType)
			}
			m.BootstrapPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BootstrapPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= OrderDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLimitOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLimitOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLimitOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapPoolId", wireType)
			}
			m.BootstrapPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BootstrapPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
