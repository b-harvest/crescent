syntax = "proto3";

package crescent.bootstrap.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package                      = "github.com/crescent-network/crescent/v4/x/bootstrap/types";
option (gogoproto.goproto_getters_all) = false;

// Params defines the set of params for the bootstrap module.
message Params {

  // fee rate of the bootstrap creation
  string creation_fee_rate = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];

  // fee rate of the order to the protocol
  string protocol_fee_rate = 2
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];

  // trading fee rate of the bootstrap pool for proposer's initial orders
  string initial_trading_fee_rate = 3
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];

  // trading fee rate of the bootstrap pool for other orders
  string trading_fee_rate = 4
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];

  // reduction rate of the required voting power
  string required_voting_power_reduction_rate = 5
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];

  // required voting power for the first stage
  string required_voting_power = 6
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];

  // precision of the tick
  uint32 tick_precision = 7;

  uint64 order_extra_gas = 8
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Gas", (gogoproto.nullable) = false];

  // vesting periods of the bootstrap coin
  repeated int64 vesting_periods = 9;

  repeated string quote_coin_whitelist = 10;

  string protocol_fee_collector_address = 11;
}

// Order defines an order.
message Order {
  // id specifies the id of the order
  uint64 id = 1;

  // bootstrap_pool_id specifies the bootstrap pool id
  uint64 bootstrap_pool_id = 2;

  // msg_height specifies the block height when the order is stored for the batch execution
  int64 msg_height = 3;

  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 4;

  // direction specifies the order direction; either buy or sell
  OrderDirection direction = 5;

  cosmos.base.v1beta1.Coin offer_coin = 6 [(gogoproto.nullable) = false];

  // remaining_offer_coin specifies the remaining offer coin
  cosmos.base.v1beta1.Coin remaining_offer_coin = 7 [(gogoproto.nullable) = false];

  // received_coin specifies the received coin after the swap
  cosmos.base.v1beta1.Coin received_coin = 8 [(gogoproto.nullable) = false];

  // price specifies the price that an orderer is willing to swap
  string price = 9 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];

  OrderStatus status = 10;

  uint32 associate_stage = 11;
}

// Pool defines bootstrap pool object
message BootstrapPool {
  // id of the bootstrap pool
  uint64 id = 1;

  // denom of the base coin
  string base_coin_denom = 2;

  // denom of the quote coin
  string quote_coin_denom = 3;

  // pair id of the liquidity module
  uint64 pair_id = 4;

  // min price of the bootstrap coin
  string min_price = 5 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = true];

  // max price of the bootstrap coin
  string max_price = 6 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = true];

  // stages specifies the schedule of the bootstrap stages
  repeated Stage stages = 7;

  // address of the proposer
  string proposer_address = 8;
  // address of the escrow account
  string escrow_address = 9;
  // address of the fee collector (incl. dust colletor)
  string fee_collector_address = 10;

  string creation_fee_rate = 11
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = true];
  string protocol_fee_rate = 12
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = true];
  string initial_trading_fee_rate = 13
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = true];
  string trading_fee_rate = 14
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = true];
}

message Stage {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  google.protobuf.Timestamp start_time = 1
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"start_time\""];

  google.protobuf.Timestamp end_time = 2
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"start_time\""];
}

// OrderDirection enumerates order directions.
enum OrderDirection {
  option (gogoproto.goproto_enum_prefix) = false;

  // ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
  ORDER_DIRECTION_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OrderDirectionUnspecified"];

  // ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
  ORDER_DIRECTION_BUY = 1 [(gogoproto.enumvalue_customname) = "OrderDirectionBuy"];

  // ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
  ORDER_DIRECTION_SELL = 2 [(gogoproto.enumvalue_customname) = "OrderDirectionSell"];
}

// OrderStatus enumerates order statuses.
enum OrderStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // ORDER_STATUS_UNSPECIFIED specifies unknown order status
  ORDER_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OrderStatusUnspecified"];

  // ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
  ORDER_STATUS_NOT_EXECUTED = 1 [(gogoproto.enumvalue_customname) = "OrderStatusNotExecuted"];

  // ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
  ORDER_STATUS_NOT_MATCHED = 2 [(gogoproto.enumvalue_customname) = "OrderStatusNotMatched"];

  // ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
  ORDER_STATUS_PARTIALLY_MATCHED = 3 [(gogoproto.enumvalue_customname) = "OrderStatusPartiallyMatched"];

  // ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
  ORDER_STATUS_COMPLETED = 4 [(gogoproto.enumvalue_customname) = "OrderStatusCompleted"];

  // ORDER_STATUS_EXPIRED indicates the order has been expired
  ORDER_STATUS_EXPIRED = 5 [(gogoproto.enumvalue_customname) = "OrderStatusExpired"];
}
